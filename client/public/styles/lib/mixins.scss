@use './functions' as *;
@use './mediaQueries' as *;
@use "sass:map";

/* Миксин для работы с полифиллом селектора :focus-visible */
@mixin focusVisible() {

  &[data-focus-visible-added] {
    @content;
  }
}


@mixin clearListStyle() {
  padding-left: 0;
  margin-top: 0;
  margin-bottom: 0;

  list-style: none;
}


@mixin placeholderColor($color) {

  &::-webkit-input-placeholder {
    color: $color;
  }

  &::-moz-placeholder {
    color: $color;
  }

  &:-ms-input-placeholder {
    color: $color;
  }
}

@mixin mozScrollBar($light-theme: true) {
  scrollbar-width: thin;

  @if $light-theme {
    scrollbar-color: var(--Color-Scrollbar) transparent;

    &:hover {
      scrollbar-color: var(--Color-Scrollbar-hover) transparent;
    }
  } @else {
    scrollbar-color: var(--Color-Scrollbar-dark);

    &:hover {
      scrollbar-color: var(--Color-Scrollbar-darkHover);
    }
  }
}

@mixin scrollbar($light-theme: true) {

  ::-webkit-scrollbar {
    width: rem(10);
    height: rem(10);
  }

  ::-webkit-scrollbar-thumb {
    width: rem(8);
    height: rem(8);

    border: rem(4) solid transparent;
    border-radius: rem(8);
    background-clip: padding-box;

    @if $light-theme {
      background-color: var(--Color-Scrollbar);

      &:hover {
        background-color: var(--Color-Scrollbar-hover);
      }
    } @else {
      background-color: var(--Color-Scrollbar-dark);

      &:hover {
        background-color: var(--Color-Scrollbar-darkHover);
      }
    }
  }
}

@mixin flex($wrap: false, $direction: false, $justify: false, $align-items: false, $align-content: false) {
  display: flex;
  @if $wrap {
    flex-wrap: $wrap;
  };
  @if $justify {
    justify-content: $justify;
  };
  @if $align-items {
    align-items: $align-items;
  };
  @if $align-content {
    align-content: $align-content;
  };
  @if $direction {
    flex-direction: $direction;
  };
}

@mixin sectionPadding($default, $mTop: false, $mBottom: false, $pBottom: false, $pTop: false) {
  padding: $default;
  @if $mTop {
    margin-top: rem($mTop)
  }
  @if $pTop {
    padding-top: rem($pTop)
  }
  @if $mBottom {
    margin-bottom: rem($mBottom)
  }
  @if $pBottom {
    padding-bottom: rem($pBottom)
  }
}

@mixin position($left: false, $top: false, $right: false, $bottom: false, $pos: absolute) {
  position: $pos;
  @if $left {
    left: $left
  }
  @if $top {
    top: $top
  }
  @if $right {
    right: $right
  }
  @if $bottom {
    bottom: $bottom
  }
}

@mixin wh($w: false, $h: false) {
  @if $w {
    width: $w
  }
  @if $h {
    height: $h
  }
}

@mixin text($size: rem(16), $transform: false, $weight: 'medium', $line-height: false) {
  font-size: $size !important;

  @if ($weight == 'medium') {
    font-weight: var(--FontWeight-Medium);
  } @else if ($weight == 'regular') {
    font-weight: var(--FontWeight-Regular);
  } @else if ($weight == 'light') {
    font-weight: var(--FontWeight-Light);
  } @else if ($weight == 'bold') {
    font-weight: var(--FontWeight-Bold);
  }
  @if ($transform) {
    text-transform: uppercase;
  }
  @if ($line-height) {
    line-height: $line-height;
  }
}

@mixin textEllipsis {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}



@mixin button($buttonName, $variants, $styleType) {
  $this: &;
  $name: map.get($variants, $buttonName);

  @if $styleType == 'filled' {
      border: none;
      font-style: italic;
  }
  @if $styleType == 'rounded' {
      border-width: rem(1);
      border-style: solid;
  }

  @if $name {
    @each $property, $colors in $name {
      @if ($property == 'hover') {
        &:hover {
          @each $prop, $color1 in $colors {
            #{$prop}: $color1;
          }
        }
      } @else if ($property == 'active') {
        &:active {
          @each $prop, $color1 in $colors {
            #{$prop}: $color1;
          }
        }
      } @else if ($property == 'icon') {
        .Button-Icon {
          @each $prop, $color1 in $colors {
            #{$prop}: $color1;
          }
        }
      } @else if ($property == 'loading') {
        $bcg: map.get($colors, "background");
        $proc: map.get($colors, "process");

        @if $bcg {
          .Button-LoadingBackground {
            background: $bcg;
          }
        }
        @if $proc {
          .Button-LoadingProgress {
            background-color: $proc;
          }
        }
      } @else {
        #{$property}: $colors;
      }
    }
  }
}

// для всех экранов < 1920px
@mixin media-1920 {
  @media (max-width: $m1920) {
    @content
  }
}

// для всех экранов < 1366px
@mixin media-1366 {
  @media (max-width: $m1366) {
    @content
  }
}

// для всех экранов < 1024px
@mixin media-1024 {
  @media (max-width: $m1024) {
    @content
  }
}

// для всех экранов < 768px
@mixin media-768 {
  @media (max-width: $m768) {
    @content
  }
}

// для всех экранов < 360px
@mixin media-360 {
  @media (max-width: $m360) {
    @content
  }
}
